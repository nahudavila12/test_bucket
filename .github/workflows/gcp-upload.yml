name: Upload App Versions to GCP

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Necesario para obtener todos los commits
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Calculate version
      id: version
      run: |
        # Obtener el número de commits en main
        $COMMIT_COUNT = (git rev-list --count main)
        # Crear versión en formato MAJOR.MINOR.PATCH
        # Usamos 1.0.{número de commit} como esquema de versión
        $VERSION = "1.0.$COMMIT_COUNT"
        echo "VERSION=$VERSION" >> $env:GITHUB_ENV
        echo "Version calculated: $VERSION"

    - name: Install dependencies
      run: npm install

    - name: Update package.json version
      run: |
        $content = Get-Content package.json -Raw | ConvertFrom-Json
        $content.version = $env:VERSION
        $content | ConvertTo-Json -Depth 32 | Set-Content package.json

    - name: Build application
      run: |
        npm run build
        npm run package:win
    
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
    
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
    
    - name: 'Upload version and update index'
      run: |
        # Crear metadata de la versión
        $commitMessage = git log -1 --pretty=%B
        $versionMetadata = @{
          version = $env:VERSION
          release_date = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          requirements = @{
            minimal = @{
              ram = "4GB"  # Valores por defecto
              cpu = "Intel i3 o equivalente"
              gpu = "Intel HD Graphics"
            }
            recommended = @{
              ram = "8GB"
              cpu = "Intel i5 o equivalente"
              gpu = "NVIDIA GTX 1050 o equivalente"
            }
          }
          features = @($commitMessage)  # Usar el mensaje del commit como característica
          downloadUrl = "gs://${{ secrets.GCP_BUCKET_NAME }}/versions/$env:VERSION/ivolution.exe"
          commitHash = (git rev-parse HEAD)
          commitMessage = $commitMessage
        }
        
        # Convertir a JSON y guardar
        $versionMetadata | ConvertTo-Json -Depth 10 | Set-Content version-metadata.json
        
        # Subir el ejecutable y metadata
        gsutil cp "release/Ivolution Launcher Setup $env:VERSION.exe" "gs://${{ secrets.GCP_BUCKET_NAME }}/versions/$env:VERSION/ivolution.exe"
        gsutil cp version-metadata.json "gs://${{ secrets.GCP_BUCKET_NAME }}/versions/$env:VERSION/metadata.json"
        
        # Descargar el índice actual si existe
        if (gsutil -q stat "gs://${{ secrets.GCP_BUCKET_NAME }}/versions/index.json") {
          gsutil cp "gs://${{ secrets.GCP_BUCKET_NAME }}/versions/index.json" current-index.json
          $currentIndex = Get-Content current-index.json | ConvertFrom-Json
        } else {
          $currentIndex = @{
            versions = @()
          }
        }
        
        # Agregar o actualizar la versión en el índice
        $versions = $currentIndex.versions | Where-Object { $_.version -ne $env:VERSION }
        $versions += $versionMetadata
        
        # Ordenar versiones por número de versión (más reciente primero)
        $versions = $versions | Sort-Object { [version]$_.version } -Descending
        
        # Crear nuevo índice
        @{
          versions = $versions
        } | ConvertTo-Json -Depth 10 | Set-Content index.json
        
        # Subir el nuevo índice
        gsutil cp index.json "gs://${{ secrets.GCP_BUCKET_NAME }}/versions/index.json"